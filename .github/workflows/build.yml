name: Build and Test
on:
  pull_request:
  push:
    branches: ["main", "beta"]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Cancel previous running workflows
        uses: fkirc/skip-duplicate-actions@9da67cec51d21092667038f0f4fda73099a3a451
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 14.17.6
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
      - name: install dependencies
        run: yarn install --frozen-lockfile --non-interactive --production=false
      - name: Lint commit message
        uses: wagoid/commitlint-github-action@296247dfa6a133767fe0d64d08fb66326047b680
      - name: lint Javascript
        run: yarn lint

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint]
    strategy:
      matrix:
        node: [10, 14, 16]
        include:
          - node: 14
            withCoverage: ${{ true }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
      - name: Login on dockerhub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Start docker container
        run: docker-compose up -d; sleep 15
      - name: Test with Node ${{ matrix.node }}
        if: ${{ !matrix.withCoverage }}
        run: yarn test
      - name: Test with Node ${{ matrix.node }} & Send coverage
        uses: paambaati/codeclimate-action@84cea27117a473d605400ca3a97fcef7e433e2d6
        if: matrix.withCoverage && matrix.node == 14
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: yarn test:coverage
      - name: Test prepack
        run: yarn prepack
      - name: Test postpack
        run: yarn postpack

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Cancel previous running workflows
        uses: fkirc/skip-duplicate-actions@master
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.14.0
      - uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock', '**/package.json') }}
      - name: Build
        run: yarn build
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            /dist/*
            package.json
            /bin
            /npm-shrinkwrap.json
            /oclif.manifest.json
          retention-days: 1

  deploy:
    name: Release package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta')
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.17.6
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
      - name: Get Semantic Release current version
        id: semantic_version
        run: |
          VERSION=`node -p "require('./package.json').devDependencies['semantic-release']"`
          echo "::set-output name=version::$VERSION"
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@767cc0b0cd610ffb1ffee1b36a9b39120adc5f80
        id: semantic
        with:
          semantic_version: ${{ steps.semantic_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMITTER_NAME }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
